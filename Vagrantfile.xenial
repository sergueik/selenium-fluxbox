provision_selenium = ENV.fetch('PROVISION_SELENIUM', '')
selenium_version = ENV.fetch('SELENIUM_VERSION', '2.53')
chromedriver_version = ENV.fetch('CHROMEDRIVER_VERSION', '2.24')
firefox_version = ENV.fetch('FIREFOX_VERSION', '45.0.1')
geckodriver_version = ENV.fetch('GECKODRIVER_VERSION', '')

# ensure the requested Chrome version is available on http://www.slimjetbrowser.com/chrome/
available_chrome_versions = [
  '67.0.3396.79',
  '66.0.3359.181',
  '65.0.3325.181',
  '64.0.3282.140',
  '63.0.3239.108',
  '62.0.3202.75',
  '61.0.3163.79',
  '60.0.3112.90',
  '59.0.3071.86',
  '58.0.3029.96',
  '57.0.2987.133',
  '56.0.2924.87',
  '55.0.2883.75',
  '54.0.2840.71',
  '53.0.2785.116',
  '52.0.2743.116',
  '51.0.2704.84',
  '50.0.2661.75',
  '49.0.2623.75',
  '48.0.2564.109',
]

# TODO: add mnemonicts as oldest => -1, newest => 0
chrome_version = ENV.fetch('CHROME_VERSION', available_chrome_versions[0])
# chrome_version = ENV.fetch('CHROME_VERSION', available_chrome_versions[-1])
unless chrome_version.empty? or chrome_version =~ /(?:beta|stable|unstable)/ or available_chrome_versions.include?(chrome_version)
  puts 'CHROME_VERSION shoukd be set to "stable", "unstable" or "beta"'
  puts "Alternatively, few specific old Chrome versions available :\n" + available_chrome_versions.join("\n")
  exit
end

VAGRANTFILE_API_VERSION = '2'
basedir = ENV.fetch('HOME','') || ENV.fetch('USERPROFILE', '')
box_memory = ENV.fetch('BOX_MEMORY', '2048').to_i
basedir = basedir.gsub('\\', '/')
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = 'ubuntu/xenial64'
  # Localy cached vagrant box image from https://app.vagrantup.com/Th33x1l3/boxes/vagrant-selenium/versions/0.2.1/providers/virtualbox.box
  config_vm_box_name = 'xenial-server-amd64-vagrant-selenium.box'
  config.vm.box_url = "file://#{basedir}/Downloads/#{config_vm_box_name}"
  config.vm.network :forwarded_port, guest:4444, host:4444
  config.vm.network :private_network, ip: '192.168.33.12'
  config.vm.boot_timeout = 600
  # NOTE: some Xenial images have the following problem out of the box
  # sudo: unable to resolve host ubuntu-xenial
  # https://bugs.launchpad.net/ubuntu/+source/livecd-rootfs/+bug/1561250
  # NOTE daily ubuntu xenial images have no vagrant user
  # https://bugs.launchpad.net/cloud-images/+bug/1569237
  config.vm.hostname = 'ubuntu-xenial'
  # Configure common synced folder
  config.vm.synced_folder './' , '/vagrant'
  config.vm.provision 'shell', inline: <<-SHELL

#!/bin/bash
#=========================================================
set -x

if ! grep -q $(cat /etc/hostname) /etc/hosts; then
  echo 127.0.0.1 $(cat /etc/hostname) $(cat /etc/hostname) | more /etc/hosts
  echo 127.0.1.1 vagrant | more /etc/hosts
  echo 127.0.1.1 localhost | more /etc/hosts
fi
#=========================================================
# echo Clearing the proxy settings
sed -i 's/^/# /' /etc/apt/apt.conf.d/01proxy
sed -i '/[pP][rR][oO][xX][yY]/I d' /etc/environment
rm -f /etc/profile.d/proxy.sh
unset http_proxy HTTP_PROXY https_proxy HTTPS_PROXY
#=========================================================
echo Install the packages
apt-get -qq update
apt-get -qqy install openjdk-8-jdk fluxbox xorg unzip vim default-jre rungetty wget jq
update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
#=========================================================
echo Set autologin for the vagrant user
mkdir -pv /etc/systemd/system/getty@tty1.service.d/
cat <<EOF>/etc/systemd/system/getty@tty1.service.d/autologin.conf
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin vagrant --noclear %I 38400 linux
EOF
#=========================================================
cat <<EOF>> .profile
if [ ! -e '/tmp/.X0-lock' ] ; then
  echo -n Start X on login
  startx
else
  echo X is alredy running..
fi
EOF
#=========================================================
PROVISION_SELENIUM='#{provision_selenium}'
if [[ $PROVISION_SELENIUM ]]
then
  echo Updating Selenium app stack
  FIREFOX_VERSION='#{firefox_version}'
  if [[ $FIREFOX_VERSION ]]
  then
    echo Install Firefox version ${FIREFOX_VERSION}
    cd /vagrant
    PACKAGE_ARCHIVE="firefox-${FIREFOX_VERSION}.tar.bz2"
    if [ ! -e $PACKAGE_ARCHIVE ]
    then
      URL="https://ftp.mozilla.org/pub/firefox/releases/${FIREFOX_VERSION}/linux-x86_64/en-US/${PACKAGE_ARCHIVE}"
      wget -O $PACKAGE_ARCHIVE -nv $URL
    else
      echo Using already downloaded archive $PACKAGE_ARCHIVE
    fi
    mkdir -p /home/vagrant/firefox
    cd /home/vagrant
    tar xjf "/vagrant/${PACKAGE_ARCHIVE}"
    cp -R firefox /usr/lib
  else
    echo Install the latest Firefox
    apt-get -qqy install firefox
  fi
  #=========================================================
  SELENIUM_VERSION='#{selenium_version}'
  if [[ $SELENIUM_VERSION ]]
  then
    echo Download Selenium version $SELENIUM_VERSION
    SELENIUM_RELEASE=$(curl -# "https://selenium-release.storage.googleapis.com/" | sed -n "s/.*<Key>\\\\(${SELENIUM_VERSION}\\\\/selenium-server-standalone[^<][^>]*\\\\)<\\\\/Key>.*/\\\\1/p")
  else
    echo Download latest Selenium Server
    SELENIUM_RELEASE=$(curl -# https://selenium-release.storage.googleapis.com/ | sed -n 's/.*<Key>\\([^>][^>]*selenium-server-standalone[^<][^<]*\\)<\\/Key>.*/\\1/p')
    SELENIUM_VERSION=$(echo $SELENIUM_RELEASE | sed -n 's/.*selenium-server-standalone-\\([0-9][0-9.]*\\).jar/\\1/p')
  fi
  PACKAGE_ARCHIVE="selenium-server-standalone-${SELENIUM_VERSION}.jar"
  cd /vagrant
  if [ ! -e $PACKAGE_ARCHIVE ]
  then
    URL="https://selenium-release.storage.googleapis.com/${SELENIUM_RELEASE}"
    echo Downloading Selenium $PACKAGE_ARCHIVE from $URL
    wget -O $PACKAGE_ARCHIVE -nv $URL
  else
    echo Using already downloaded $PACKAGE_ARCHIVE
  fi
  cp $PACKAGE_ARCHIVE /home/vagrant/selenium-server-standalone.jar
  cd /home/vagrant
  chown vagrant:vagrant selenium-server-standalone.jar
  #=========================================================
  CHROME_VERSION='#{chrome_version}'
  if [[ $CHROME_VERSION ]]
  then
    echo installing libnss3
    apt-get -qqy install --only-upgrade libnss3
    case $CHROME_VERSION in
      beta|stable|unstable)
        # https://www.google.com/linuxrepositories/
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        apt-add-repository http://dl.google.com/linux/chrome/deb/
        apt-get -qq update
        apt-get install google-chrome-${CHROME_VERSION}
      ;;
      *)
        apt-get remove -qqy -f google-chrome-stable
	# TODO: fix trailing whitespace
        apt-get -qqy install libxml2-utils
	curl -# https://www.slimjet.com/chrome/google-chrome-old-version.php -o /tmp/a.html
        LATEST_CHROME_VERSION=$(xmllint --htmlout --html --xpath "//table[3]//tr/td/a[contains(@href,'file=lnx')]/@href" /tmp/a.html 2> /dev/null | sed 's|href="download-chrome.php?file=lnx%2Fchrome64_\\([0-9][0-9.]*\\).deb"|\\n\\1|gp;'| sort -ru | head -1 | awk '{print $1}')
        echo "LatestÂ Chrome version available on slimjet: '${LATEST_CHROME_VERSION}'"
        echo Installing Chrome version $CHROME_VERSION
        export URL="http://www.slimjetbrowser.com/chrome/lnx/chrome64_${CHROME_VERSION}.deb"
        cd /vagrant
        PACKAGE_ARCHIVE="chrome64_${CHROME_VERSION}.deb"
        if [ ! -e $PACKAGE_ARCHIVE ]
        then
          echo Downloading Chrome from $URL
          wget -nv $URL
        else
          echo Using already downloaded archive $PACKAGE_ARCHIVE
        fi
        apt-get install -qqy libxss1 libappindicator1 libindicator7
        dpkg -i "chrome64_${CHROME_VERSION}.deb"
        # rm "chrome64_${CHROME_VERSION}.deb"
        cd /home/vagrant
      ;;
    esac
  else
    echo Download the latest Chrome
    # http://askubuntu.com/questions/79280/how-to-install-chrome-browser-properly-via-command-line
    cd /tmp
    wget -nv "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
    apt-get install -qqy libxss1 libappindicator1 libindicator7
    dpkg -i google-chrome-stable_current_amd64.deb
    rm google-chrome-stable_current_amd64.deb
    apt-get install -qqy -f google-chrome-stable
    cd -
  fi
  #=========================================================
  CHROMEDRIVER_VERSION='#{chromedriver_version}'
  if [[ $CHROMEDRIVER_VERSION ]]
  then
    echo Download Chrome Driver version $CHROMEDRIVER_VERSION
  else
    echo Download latest Chrome Driver
    CHROMEDRIVER_VERSION=$(curl -# "http://chromedriver.storage.googleapis.com/LATEST_RELEASE")
  fi
  PACKAGE_ARCHIVE='chromedriver_linux64.zip'
  cd /vagrant
  if [ ! -e $PACKAGE_ARCHIVE ]; then
    URL="http://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
    wget -O $PACKAGE_ARCHIVE -nv $URL
  fi
  cd /home/vagrant
  unzip -o "/vagrant/${PACKAGE_ARCHIVE}"
  chown vagrant:vagrant chromedriver
  echo Installed Chrome Driver version $(./chromedriver --version| head -1 | cut -f 2 -d ' ')
  echo Done
  #=========================================================
  GECKODRIVER_VERSION='#{geckodriver_version}'
  if [[ $GECKODRIVER_VERSION ]]
  then
    echo Download the latest Gecko Driver version $GECKODRIVER_VERSION
  else
    echo Determine the latest version of Gecko Driver
    GECKODRIVER_VERSION=$(curl -insecure -L -# https://github.com/mozilla/geckodriver/releases | sed -n 's/.*<a href="\\/mozilla\\/geckodriver\\/releases\\/download\\/v\\([0-9.][0-9.]*\\)\\/geckodriver-.*-linux64.*/\\1/p' | head -1)
  fi
  URL="https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz"
  ARCHIVE='/var/tmp/geckodriver_linux64.tar.gz'
  echo Downloading GECKODRIVER version $GECKODRIVER_VERSION from $URL
  wget -O $ARCHIVE -nv $URL
  cd /home/vagrant
  tar -xzf $ARCHIVE
  chown vagrant:vagrant geckodriver
  echo Installed Gecko Driver version $(./geckodriver --version | head -1 | cut -f 2 -d ' ')
  # TODO: geckodriver ERROR Address in use (os error 98)
  #=========================================================
fi

#=========================================================
echo create and populate the .fluxbox directory.

# cp /vagrant/fluxbox.tar.gz /home/vagrant
# pushd /home/vagrant
# tar xzvf fluxbox.tar.gz

pushd /home/vagrant
mkdir -p .fluxbox/backgrounds .fluxbox/pixmaps .fluxbox/styles

cat <<EOF > .fluxbox/apps
[app] (name=fbrun)
  [Position]    (WINCENTER)     {0 0}
  [Layer]       {2}
[end]
EOF

touch .fluxbox/fbrun_history

cat <<EOF > .fluxbox/init
! If you're looking for settings to configure, they won't be saved here until
! you change something in the fluxbox configuration menu.

session.menuFile:       ~/.fluxbox/menu
session.keyFile: ~/.fluxbox/keys
session.styleFile: /usr/share/fluxbox/styles//ubuntu-light
session.configVersion:  13
session.screen0.toolbar.widthPercent: 100
session.screen0.strftimeFormat: %d %b, %a %02k:%M:%S
session.screen0.toolbar.tools: prevworkspace, workspacename, nextworkspace, clock, prevwindow, nextwindow, iconbar, systemtray
EOF

cat <<EOF > .fluxbox/keys
# click on the desktop to get menus
OnDesktop Mouse1 :HideMenus
OnDesktop Mouse2 :WorkspaceMenu
OnDesktop Mouse3 :RootMenu

# scroll on the desktop to change workspaces
OnDesktop Mouse4 :PrevWorkspace
OnDesktop Mouse5 :NextWorkspace

# scroll on the toolbar to change current window
OnToolbar Mouse4 :PrevWindow {static groups} (iconhidden=no)
OnToolbar Mouse5 :NextWindow {static groups} (iconhidden=no)

# alt + left/right click to move/resize a window
OnWindow Mod1 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}
OnWindowBorder Move1 :StartMoving

OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
OnLeftGrip Move1 :StartResizing bottomleft
OnRightGrip Move1 :StartResizing bottomright

# alt + middle click to lower the window
OnWindow Mod1 Mouse2 :Lower

# control-click a window's titlebar and drag to attach windows
OnTitlebar Control Mouse1 :StartTabbing

# double click on the titlebar to shade
OnTitlebar Double Mouse1 :Shade

# left click on the titlebar to move the window
OnTitlebar Mouse1 :MacroCmd {Raise} {Focus} {ActivateTab}
OnTitlebar Move1  :StartMoving

# middle click on the titlebar to lower
OnTitlebar Mouse2 :Lower

# right click on the titlebar for a menu of options
OnTitlebar Mouse3 :WindowMenu

# alt-tab
Mod1 Tab :NextWindow {groups} (workspace=[current])
Mod1 Shift Tab :PrevWindow {groups} (workspace=[current])

# cycle through tabs in the current window
Mod4 Tab :NextTab
Mod4 Shift Tab :PrevTab

# go to a specific tab in the current window
Mod4 1 :Tab 1
Mod4 2 :Tab 2
Mod4 3 :Tab 3
Mod4 4 :Tab 4
Mod4 5 :Tab 5
Mod4 6 :Tab 6
Mod4 7 :Tab 7
Mod4 8 :Tab 8
Mod4 9 :Tab 9

# open a terminal
Mod1 F1 :Exec x-terminal-emulator

# open a dialog to run programs
Mod1 F2 :Exec fbrun

# volume settings, using common keycodes
# if these don't work, use xev to find out your real keycodes
176 :Exec amixer sset Master,0 1+
174 :Exec amixer sset Master,0 1-
160 :Exec amixer sset Master,0 toggle

# current window commands
Mod1 F4 :Close
Mod1 F5 :Kill
Mod1 F9 :Minimize
Mod1 F10 :Maximize
Mod1 F11 :Fullscreen

# open the window menu
Mod1 space :WindowMenu

# exit fluxbox
Control Mod1 Delete :Exit

# change to previous/next workspace
Control Mod1 Left :PrevWorkspace
Control Mod1 Right :NextWorkspace

# send the current window to previous/next workspace
Mod4 Left :SendToPrevWorkspace
Mod4 Right :SendToNextWorkspace

# send the current window and follow it to previous/next workspace
Control Mod4 Left :TakeToPrevWorkspace
Control Mod4 Right :TakeToNextWorkspace

# change to a specific workspace
Control F1 :Workspace 1
Control F2 :Workspace 2
Control F3 :Workspace 3
Control F4 :Workspace 4

# send the current window to a specific workspace
Mod4 F1 :SendToWorkspace 1
Mod4 F2 :SendToWorkspace 2
Mod4 F3 :SendToWorkspace 3
Mod4 F4 :SendToWorkspace 4

# send the current window and change to a specific workspace
Control Mod4 F1 :TakeToWorkspace 1
Control Mod4 F2 :TakeToWorkspace 2
Control Mod4 F3 :TakeToWorkspace 3
Control Mod4 F4 :TakeToWorkspace 4
EOF

touch .fluxbox/lastwallpaper

cat <<EOF > .fluxbox/menu
[begin] (fluxbox)
[include] (/etc/X11/fluxbox/fluxbox-menu)
[end]
EOF

touch .fluxbox/overlay

cat <<EOF > .fluxbox/startup
#!/bin/sh
#
# vanilla fluxbox startup-script:
#
# Lines starting with a '#' are ignored.

# Change your keymap:
xmodmap "/home/vagrant/.Xmodmap"

# Applications you want to run with fluxbox.
# MAKE SURE THAT APPS THAT KEEP RUNNING HAVE AN ''&'' AT THE END.
# idesk &
#
# Debian-local change:
#   - fbautostart has been added with a quick hack to check to see if it
#     exists. If it does, we'll start it up by default.
which fbautostart > /dev/null
if [ $? -eq 0 ]; then
  fbautostart
fi

# And last but not least we start fluxbox.
# Because it is the last app you have to run it with ''exec'' before it.

exec fluxbox
# or if you want to keep a log:
# exec fluxbox -log "/home/vagrant/.fluxbox/log"
# Set screen resolution
xrandr -s 1280x800
EOF

cat <<EOF > .fluxbox/windowmenu
[begin]
  [shade]
  [stick]
  [maximize]
  [iconify]
  [raise]
  [lower]
  [settitledialog]
  [sendto]
  [layer]
  [alpha]
  [extramenus]
  [separator]
  [close]
[end]
EOF

#=========================================================
#=========================================================
echo Install tmux scripts
cat <<EOF> tmux.sh
#!/bin/sh
tmux start-server

tmux new-session -d -s chrome-driver
tmux send-keys -t chrome-driver:0 'export DISPLAY=:0' C-m
tmux send-keys -t chrome-driver:0 './chromedriver' C-m

tmux new-session -d -s selenium
tmux send-keys -t selenium:0 'export DISPLAY=:0' C-m

# NOTE options for java runtime.
tmux send-keys -t selenium:0 'java -Xmn512M -Xms1G -Xmx1G -jar selenium-server-standalone.jar' C-m
tmux send-keys -t selenium:0 'for cnt in {0..10}; do wget -O- http://127.0.0.1:4444/wd/hub; sleep 120; done' C-m

EOF
chmod +x tmux.sh
chown vagrant:vagrant tmux.sh
#=========================================================
echo Install startup scripts
cat <<EOF> /etc/X11/Xsession.d/9999-common_start
#!/bin/sh
/home/vagrant/tmux.sh &
xterm -fa fixed &
EOF
chmod +x /etc/X11/Xsession.d/9999-common_start
#=========================================================
echo -n 'Add host alias'
echo '192.168.33.1 host'| tee -a /etc/hosts
#=========================================================
echo Reboot the VM
sudo reboot

  SHELL

  config.vm.provider :virtualbox do |v|
    v.gui  = true
    v.name = 'Selenium Fluxbox Xenial'

    v.customize ['modifyvm', :id, '--memory', box_memory ]
    v.customize ['modifyvm', :id, '--vram', '16']
    v.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
    v.customize ['setextradata', 'global', 'GUI/MaxGuestResolution', 'any']
    v.customize ['setextradata', :id, 'CustomVideoMode1', '1280x800x32']
    v.customize ['modifyvm', :id, '--cableconnected1', 'on']
    # the following command requires Virtalbox Guest Additions to be installed i the box, currently it is not the csase with xenial base box we are using
    # VBoxManage controlvm 'Selenium Fluxbox Trusty' setvideomodehint 1280 800 32
  end
end
